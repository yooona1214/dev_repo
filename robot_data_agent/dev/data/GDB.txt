주요 엔티티 및 관계 정의
Robot

속성: robotID, model, manufacturer 등
Service

속성: serviceID, robotID, serviceType, startTime, endTime, currentState
관계:
Service - (has) -> ServiceStatus
Service - (recorded) -> ServiceHistory
ServiceStatus

속성: serviceID, timestamp, stateType, stateValue
ServiceHistory

속성: serviceID, startTime, endTime, completionStatus, destination
Error

속성: errorCode, location, cause, solution, threshold
ErrorHistory

속성: errorID, robotID, timestamp, errorCode
State

속성: stateID, robotID, timestamp, stateType, stateValue, threshold
HardwareStatus

속성: hardwareID, robotID, timestamp, hardwareType (e.g., Drawer, UIPad, LED), state
SensorStatus

속성: sensorID, robotID, timestamp, sensorType (e.g., Camera, TOF, LiDAR), state
VoC

속성: vocID, majorCategory, minorCategory, customerComplaint, cause, solution, timestamp, robotID, customerID
Customer

속성: customerID, name, contact, address, membershipLevel, joinDate, preferredContactMethod


image.png




데이터베이스 예시 및 쿼리
이 구조를 바탕으로, LLM이 특정 정보를 요청할 때 Knowledge Graph를 참조하여 적절한 데이터베이스 쿼리를 생성할 수 있습니다.

예시: 로봇이 자꾸 멈추는 문제를 조사
질문 분석: "로봇이 자꾸 멈춥니다. 이유가 뭘까요?"

Knowledge Graph 참조:

관련 엔티티: Robot, ErrorHistory, Error, State, ServiceHistory, ServiceStatus, HardwareStatus, SensorStatus, VoC
관련 관계:
로봇의 ErrorHistory를 조회하여 에러 원인 확인
로봇의 State를 조회하여 현재 상태와 기준치 비교
로봇의 ServiceHistory를 조회하여 서비스 중 발생한 문제 확인
HardwareStatus와 SensorStatus를 조회하여 하드웨어 및 센서 상태 확인
VoC를 조회하여 고객 불만 사항 확인
데이터베이스 쿼리 생성 및 실행:

에러 기록 조회 쿼리:
sql
코드 복사
SELECT * FROM ErrorHistory WHERE robotID = 'R001';
상태 기록 조회 쿼리:
sql
코드 복사
SELECT * FROM State WHERE robotID = 'R001' AND timestamp > '2024-07-23T09:00:00';
하드웨어 상태 조회 쿼리:
sql
코드 복사
SELECT * FROM HardwareStatus WHERE robotID = 'R001' AND timestamp > '2024-07-23T09:00:00';
센서 상태 조회 쿼리:
sql
코드 복사
SELECT * FROM SensorStatus WHERE robotID = 'R001' AND timestamp > '2024-07-23T09:00:00';
서비스 이력 조회 쿼리:
sql
코드 복사
SELECT * FROM ServiceHistory WHERE robotID = 'R001' AND completionStatus = 'Incomplete';
고객 불만 사항 조회 쿼리:
sql
코드 복사
SELECT * FROM VoC WHERE robotID = 'R001';
종합적인 응답 생성
LLM은 데이터베이스 쿼리를 통해 얻은 데이터를 종합하여 응답을 생성합니다. 예를 들어:

"로봇 R001이 자꾸 멈추는 문제는 모터 과열과 배터리 부족 때문일 수 있습니다. 에러 기록에 따르면 모터가 과열되었으며, 배터리 상태가 낮은 상태였습니다. 또한, 최근 서비스 중 일부가 완료되지 않았습니다. 하드웨어 상태 기록에서 서랍이 열리지 않았고, 센서 상태 기록에서 LiDAR 센서의 오류가 있었습니다. 모터의 냉각 시스템을 점검하고 배터리를 충전한 후, 서랍과 LiDAR 센서를 확인하세요."

이 구조를 통해 LLM이 Knowledge Graph를 활용하여 DB에서 필요한 정보를 정확하게 찾아내고, 이를 바탕으로 사용자에게 유용한 답변을 제공할 수 있습니다.

자 그럼 실제 이렇게 널리지 그래프를 참조해서 DB에서 데이터를 찾아봐야하는데, 실제 DB의 Table이나 컬럼 이름 등은 어디다 작성할까?
ChatGPT
Knowledge Graph의 목적은 데이터베이스의 테이블 및 컬럼 구조를 숨기고, 데이터 간의 관계와 의미를 추상화하여 LLM이 데이터를 이해하고 검색할 수 있도록 돕는 것입니다. 실제 DB의 테이블 및 컬럼 이름을 관리하고 문서화하는 방법은 다음과 같습니다:

1. Documentation and Schema Mapping
1.1. Schema Documentation
설명서 또는 문서화: 데이터베이스의 테이블과 컬럼 이름, 데이터 타입, 제약 조건 등을 설명하는 문서를 작성합니다. 이 문서에는 각 테이블과 컬럼의 역할과 관계를 설명하는 정보가 포함됩니다.
예시 문서:
plaintext
코드 복사
**Table: ErrorHistory**
- errorID (INT): Primary key for error records.
- robotID (VARCHAR): ID of the robot where the error occurred.
- timestamp (DATETIME): Time when the error was recorded.
- errorCode (VARCHAR): Code representing the type of error.

**Table: ServiceHistory**
- serviceID (INT): Unique identifier for each service.
- robotID (VARCHAR): ID of the robot performing the service.
- startTime (DATETIME): Start time of the service.
- endTime (DATETIME): End time of the service.
- completionStatus (VARCHAR): Status of the service (e.g., Completed, Incomplete).
1.2. Schema Mapping Document
매핑 문서: Knowledge Graph의 엔티티와 관계를 실제 DB의 테이블 및 컬럼에 매핑하는 문서를 작성합니다. 이를 통해 LLM이 Knowledge Graph에서 특정 엔티티를 참조할 때, 실제 DB의 어떤 테이블과 컬럼을 조회해야 하는지 알 수 있습니다.
예시 매핑 문서:
plaintext
코드 복사
**Knowledge Graph Entity: ErrorHistory**
- **Table in DB**: ErrorHistory
- **Mappings**:
  - errorID -> errorID
  - robotID -> robotID
  - timestamp -> timestamp
  - errorCode -> errorCode

**Knowledge Graph Entity: ServiceHistory**
- **Table in DB**: ServiceHistory
- **Mappings**:
  - serviceID -> serviceID
  - robotID -> robotID
  - startTime -> startTime
  - endTime -> endTime
  - completionStatus -> completionStatus
2. Integration Layer
매핑 레이어: 실제 데이터베이스와 Knowledge Graph 사이에 매핑 레이어를 두어, Knowledge Graph의 엔티티를 데이터베이스의 테이블 및 컬럼으로 변환합니다. 이 레이어는 LLM이 Knowledge Graph의 엔티티를 쿼리할 때 실제 DB에서 데이터를 추출할 수 있도록 도와줍니다.
예시:
python
코드 복사
def map_entity_to_db_table(entity_name):
    mapping = {
        'ErrorHistory': 'ErrorHistory',
        'ServiceHistory': 'ServiceHistory'
    }
    return mapping.get(entity_name, None)

def get_db_columns_for_entity(entity_name):
    column_mappings = {
        'ErrorHistory': ['errorID', 'robotID', 'timestamp', 'errorCode'],
        'ServiceHistory': ['serviceID', 'robotID', 'startTime', 'endTime', 'completionStatus']
    }
    return column_mappings.get(entity_name, [])
3. Knowledge Graph Queries
쿼리 변환: Knowledge Graph를 참조하여 DB 쿼리를 동적으로 생성합니다. Knowledge Graph의 엔티티와 관계를 기반으로, 매핑 문서나 매핑 레이어를 활용하여 실제 SQL 쿼리를 생성합니다.
예시 쿼리 생성:
python
코드 복사
def generate_query_for_entity(entity_name, filters):
    table_name = map_entity_to_db_table(entity_name)
    columns = get_db_columns_for_entity(entity_name)
    
    filter_clauses = ' AND '.join([f"{key} = '{value}'" for key, value in filters.items()])
    query = f"SELECT {', '.join(columns)} FROM {table_name} WHERE {filter_clauses}"
    
    return query
4. Configuration Files
구성 파일: JSON 또는 YAML 형식으로 Knowledge Graph의 엔티티와 실제 데이터베이스의 테이블 및 컬럼을 매핑하는 설정 파일을 작성합니다. 이 파일은 코드에서 동적으로 참조할 수 있습니다.
예시 JSON 파일:
json
코드 복사
{
  "entities": {
    "ErrorHistory": {
      "table": "ErrorHistory",
      "columns": ["errorID", "robotID", "timestamp", "errorCode"]
    },
    "ServiceHistory": {
      "table": "ServiceHistory",
      "columns": ["serviceID", "robotID", "startTime", "endTime", "completionStatus"]
    }
  }
}
요약
문서화 및 매핑: Knowledge Graph의 엔티티를 데이터베이스의 테이블 및 컬럼에 매핑하는 문서를 작성하여, LLM이 Knowledge Graph를 참조하여 적절한 쿼리를 생성할 수 있도록 합니다.
매핑 레이어: 실제 데이터베이스와 Knowledge Graph 간의 매핑을 처리하는 레이어를 구현하여 동적 쿼리 생성을 지원합니다.
쿼리 변환 및 구성 파일: Knowledge Graph를 참조하여 동적으로 쿼리를 생성하고, 구성 파일을 통해 매핑 정보를 관리합니다.
이러한 방법을 통해 LLM이 Knowledge Graph를 참조하여 데이터베이스에서 적절한 데이터를 검색하고, 실제 데이터와 관련된 정보를 효율적으로 추출할 수 있습니다.

음 다시 설명하자면, 1. 고객이 이런 상황을 분석해보고 싶다고 요청 2. 널리지 그래프를 보고 어떤 데이터들을 보여주면 될지 추론(생각) 3. 실제 DB에서 데이터를 쿼리해서 보여줌 이 순서거든, 2번에서 3번을 연결하기 위해 LLM에게 제공해야할 사항을 문서로 만들라는 이야기야?
ChatGPT
맞습니다. 고객의 요청을 분석하고, Knowledge Graph를 통해 어떤 데이터가 필요할지 추론한 후, 실제 데이터베이스에서 데이터를 쿼리하여 응답을 생성하는 과정에서 필요한 정보는 다음과 같은 문서화가 필요합니다. 이 문서들은 LLM이 Knowledge Graph와 실제 DB 간의 연결을 이해하고, 적절한 쿼리를 생성할 수 있도록 도와줍니다.

LLM을 위한 문서화 내용
Knowledge Graph 구조 문서

목표: Knowledge Graph의 엔티티, 속성, 및 관계를 명확히 이해하고, 데이터베이스의 테이블 및 컬럼과 어떻게 연결되는지 파악합니다.
내용:
엔티티 목록과 각 엔티티의 속성
엔티티 간의 관계와 상호작용
각 엔티티의 역할 및 데이터 흐름
plaintext
코드 복사
**Entity: ErrorHistory**
- Attributes: errorID, robotID, timestamp, errorCode
- Relationships: 
  - [ErrorHistory] --relates to--> [Robot]
  - [ErrorHistory] --uses--> [Error]

**Entity: ServiceHistory**
- Attributes: serviceID, robotID, startTime, endTime, completionStatus
- Relationships:
  - [ServiceHistory] --relates to--> [Robot]
  - [ServiceHistory] --records--> [ServiceStatus]
테이블 및 컬럼 매핑 문서

목표: Knowledge Graph의 엔티티를 실제 데이터베이스의 테이블과 컬럼에 매핑합니다. LLM이 Knowledge Graph에서 엔티티를 참조할 때, 어떤 데이터베이스 테이블과 컬럼을 조회해야 하는지 알 수 있도록 합니다.
내용:
Knowledge Graph 엔티티와 데이터베이스 테이블 및 컬럼 간의 매핑 정보
각 엔티티에 대한 테이블 및 컬럼 정보
매핑된 필드 설명
plaintext
코드 복사
**Mapping: ErrorHistory**
- Table: ErrorHistory
- Columns:
  - errorID -> errorID
  - robotID -> robotID
  - timestamp -> timestamp
  - errorCode -> errorCode

**Mapping: ServiceHistory**
- Table: ServiceHistory
- Columns:
  - serviceID -> serviceID
  - robotID -> robotID
  - startTime -> startTime
  - endTime -> endTime
  - completionStatus -> completionStatus
쿼리 생성 가이드라인 문서

목표: Knowledge Graph의 엔티티를 참조하여 데이터베이스 쿼리를 생성하는 방법을 안내합니다.
내용:
쿼리 생성 규칙과 패턴
필터링 및 조인 방법
쿼리 예시 및 설명
plaintext
코드 복사
**Query Generation Guidelines**

- **Simple Query**:
  SELECT * FROM [TableName] WHERE [conditions]

- **Example for ErrorHistory**:
  ```sql
  SELECT errorID, robotID, timestamp, errorCode
  FROM ErrorHistory
  WHERE robotID = 'R001'
    AND timestamp BETWEEN '2024-07-23T00:00:00' AND '2024-07-23T23:59:59';
Join Example:
sql
코드 복사
SELECT E.errorID, E.errorCode, S.stateValue
FROM ErrorHistory E
JOIN State S ON E.robotID = S.robotID
WHERE E.robotID = 'R001'
  AND S.timestamp = E.timestamp;
샘플 쿼리 및 응답 템플릿 문서

목표: 실제 DB에서 쿼리를 실행한 후의 응답을 어떻게 구성할지에 대한 예시를 제공합니다.
내용:
쿼리 실행 결과를 어떻게 분석하고 종합할지에 대한 템플릿
샘플 응답
plaintext
코드 복사
**Sample Query Execution and Response Template**

- **Query Example**:
  ```sql
  SELECT errorID, robotID, timestamp, errorCode
  FROM ErrorHistory
  WHERE robotID = 'R001';
Sample Response:
plaintext
코드 복사
The following errors were recorded for robot R001:
- ErrorID: 101, Code: 404, Timestamp: 2024-07-23T10:00:00
- ErrorID: 102, Code: 500, Timestamp: 2024-07-23T11:00:00
문서화 요약
Knowledge Graph 구조 문서: Knowledge Graph의 엔티티, 속성, 관계를 설명합니다.
테이블 및 컬럼 매핑 문서: Knowledge Graph의 엔티티를 데이터베이스의 테이블 및 컬럼에 매핑합니다.
쿼리 생성 가이드라인 문서: Knowledge Graph를 참조하여 쿼리를 생성하는 방법을 설명합니다.
샘플 쿼리 및 응답 템플릿 문서: 쿼리 실행 후 응답을 구성하는 방법과 샘플 응답을 제공합니다.
이 문서들을 통해 LLM은 Knowledge Graph를 활용하여 적절한 DB 쿼리를 생성하고, 데이터베이스에서 필요한 정보를 정확히 추출하여 사용자에게 유용한 응답을 제공할 수 있습니다.

